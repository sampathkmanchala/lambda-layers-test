version: 0.2

env:
  variables:
    LAYER_ZIP: layer.zip
    HASH_FILE: requirements.hash

phases:
  install:
    runtime-versions:
      python: 3.11
    # commands:
    #   - echo "Upgrading pip..."
    #   - python -m pip install --upgrade pip
  pre_build:
    commands:
      - echo "Computing hash of requirements.txt"
      - md5sum requirements.txt > current.hash
      - |
        if [ -f $HASH_FILE ] && cmp -s current.hash $HASH_FILE; then
          echo "No changes in requirements.txt. Using cached layer."
          export LAYER_CHANGED=false
        else
          echo "requirements.txt changed. Rebuilding layer."
          cp current.hash $HASH_FILE
          export LAYER_CHANGED=true
        fi
  build:
    commands:
      - echo "Checking if layer changed"
      - |
        if [ "$LAYER_CHANGED" = true ]; then
          echo "Installing dependencies into python/ directory"
          rm -rf python
          mkdir -p python
          pip install -r requirements.txt -t python/
          zip -r $LAYER_ZIP python
        fi
      - echo "Zipping deployment package..."
      - zip -r deployment_package.zip . -x '*.git*' 'python*'
      - if [ -s deployment_package.zip ]; then echo "Deployment Zip file created successfully"; else echo "Error creating deployment zip file"; exit 1; fi
  post_build:
    commands:
      - |
        if [ "$LAYER_CHANGED" = true ]; then
          echo "Publishing new Lambda layer version"
          LAYER_VERSION=$(aws lambda publish-layer-version \
            --layer-name "$LAYER_NAME" \
            --compatible-runtimes "$PYTHON_VERSION" \
            --zip-file "fileb://$LAYER_ZIP" \
            --query 'Version' \
            --output text)
          echo "New layer version: $LAYER_VERSION"
        else
          echo "Getting latest published layer version"
          LAYER_VERSION=$(aws lambda list-layer-versions \
            --layer-name "$LAYER_NAME" \
            --query 'LayerVersions[0].Version' \
            --output text)
          echo "Reusing existing layer version: $LAYER_VERSION"
        fi

      - echo "Updating Lambda Layer..."
      - |
        if [ -f deployment_package.zip ]; then 
          aws lambda update-function-code --function-name $LAMBDA_FUNCTION_NAME --zip-file fileb://deployment_package.zip
        else 
          echo "Deployment zip file not found"; exit 1
        fi
      - echo "Updating Lambda Function Configuration to use the new layer..."
      - sleep 40
      - aws lambda update-function-configuration --function-name $LAMBDA_FUNCTION_NAME --layers "arn:aws:lambda:$AWS_REGION:$AWS_ACCOUNT_ID:layer:$LAYER_NAME:$LAYER_VERSION" \
           --query 'FunctionName' --output text
      # - |
      #   RETRIES=3
      #   while [ $RETRIES -gt 0 ]; do
      #     # if [ ! -z "$LAYER_VERSION_ARN" ]; then 
      #      FUNCTION_NAME=$(aws lambda update-function-configuration --function-name $LAMBDA_FUNCTION_NAME --layers "arn:aws:lambda:$AWS_REGION:$AWS_ACCOUNT_ID:layer:$LAYER_NAME:$LAYER_VERSION" \
      #      --query 'FunctionName' --output text)
      #     if [ ! -z "$FUNCTION_NAME" ]; then 
      #       echo "Success" && break
      #     else 
      #       echo "FUNCTION_NAME not found";
      #     fi
      #     RETRIES=$((RETRIES-1))
      #     echo "Retrying in 10 seconds..."
      #     sleep 10
      #   done
      #   if [ $RETRIES -eq 0 ]; then
      #     echo "Failed to update Lambda function configuration after multiple attempts"; exit 1
      #   fi
      # - echo "DONE!!"
       

artifacts:
  files:
    - layer.zip
    - requirements.hash

cache:
  paths:
    - 'python/**/*'
    - 'requirements.hash'
