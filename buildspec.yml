version: 0.2
phases:
  install:
    runtime-versions:
      python: 3.11
    commands:
      - echo "Installing dependencies..."
      - if [ -f requirements.txt ]; then echo "requirements.txt found"; else echo "requirements.txt not found"; exit 1; fi
      - pip install -r requirements.txt -t python
      - echo "Checking installed packages..."
      - ls -l python
      - if [ -d "python" ] && [ "$(ls -A python)" ]; then echo "Python directory is not empty"; else echo "Python directory is empty"; exit 1; fi
  build:
    commands:
      - echo "Creating Layer Zip file..."
      - zip -r python.zip python/
      - if [ -s python.zip ]; then echo "Layer Zip file created successfully"; else echo "Error creating Layer zip file zip file is empty"; exit 1; fi
      - echo "Zipping deployment package..."
      - zip -r deployment_package.zip . -x '*.git*' 'python*' 'requirements.txt'
      - if [ -s deployment_package.zip ]; then echo "Deployment Zip file created successfully"; else echo "Error creating deployment zip file"; exit 1; fi
  post_build:
    commands:
      - echo "Updating Lambda Layer..."
      - |
        if [ -f python.zip ]; then 
          LAYER_VERSIONS=$(aws lambda list-layer-versions --layer-name requests-cb-layer  --query 'LayerVersions' --output text)
          echo "Layer updated with ARN $LAYER_VERSIONS[0].LayerVersionArn" 
        else 
          echo "Layer zip file not found"; exit 1
        fi
      - echo "Updating Lambda Function Code..."
      - |
        if [ -f deployment_package.zip ]; then 
          aws lambda update-function-code --function-name lambda-layer-chapter1 --zip-file fileb://deployment_package.zip
        else 
          echo "Deployment zip file not found"; exit 1
        fi
      - echo "Updating Lambda Function Configuration to use the new layer..."
      - |
        RETRIES=5
        while [ $RETRIES -gt 0 ]; do
          if [ ! -z "$LAYER_VERSION_ARN" ]; then 
            aws lambda update-function-configuration --function-name lambda-layer-chapter1 --layers $LAYER_VERSIONS[0].LayerVersionArn && break
          else 
            echo "Layer ARN not found"; exit 1
          fi
          RETRIES=$((RETRIES-1))
          echo "Retrying in 10 seconds..."
          sleep 10
        done
        if [ $RETRIES -eq 0 ]; then
          echo "Failed to update Lambda function configuration after multiple attempts"; exit 1
        fi
      - echo "DONE!!"
